<?php

/**
 * @file
 * VectorBase's clustalw module
 *
*/


function clustalw_block_view($op='list', $delta=0, $edit=array()){
  // draw block
  $blocks['subject'] = t('clustalBlockView...i guess');
  $blocks['content'] = drupal_get_form('ajax_clustalw_genform');
  return $blocks;
}

// add js library
function clustalw_init(){
	drupal_add_js(drupal_get_path('module', 'clustalw'). '/clustalw.js');
}

function clustalw_getFastaForHsp($hsp_id){
	// look up hit name for the hsp id
	$bhId=db_query("select bh_id from blast_hsps where bs_id=$hsp_id")->fetchField();
	$name=db_query("select name from blast_hits where bh_id=$bhId")->fetchField();

	// get sequence with that hit name
	// don't bother with description since clustal doesn't use them anyway
	$conn = pg_connect("host=localhost port=5432 dbname=blast_sequences user=db_public password=limecat");
	$sql="SELECT sequence FROM raw_sequences where primary_id='$name';";
	$result = pg_query($conn, $sql);
	while ($row = pg_fetch_assoc($result)) {
		$out=">$name\n".$row['sequence']."\n";
	}
	return $out;
}

function clustalw_getFasta($inputs){
	$fasta='';
	foreach($inputs as $key => $value){
		if(strstr($key,'hsp')){
			$fasta.=clustalw_getFastaForHsp($value);
		}
	}
	return $fasta;
}

function ajax_clustalw_genform($form, &$form_state) {

	//drupal_add_js(array('xgrid' => array('xgridPath' => drupal_get_path('module','xgrid'))), 'setting');
	drupal_add_js(array('clustalw' => array('clustalwPath' => drupal_get_path('module','clustalw'))), 'setting');


  $form['clustalw'] = array(
    '#type' => 'clustalw'
//    '#prefix' => '<div id="clustalw_container" class="invisible">',
//    '#suffix' => '</div>'
  );

	$form['clustalw']['#attached'] = array(
	'css' => array(
		'type' => 'file',
		'data' => drupal_get_path('module', 'clustalw').'/clustalw.css'
		)
	);
	$form['clustalw']['#attached']['js'] =	array(
		'data' => drupal_get_path('module', 'clustalw').'/clustalw.js',
		'data' => drupal_get_path('module', 'clustalw').'/tablesorter/jquery.tablesorter.js',
	);


  $form['clustalw']['sequence'] = array(
    '#type' => 'textarea',
    '#resizable' => FALSE,
    '#rows' => 8,
    '#cols' => 50,
    //'#attributes' => array('placeholder' => 'Paste your sequences here'),
   	'#default_value' => t(clustalw_getFasta($_POST)),
  );


	$form['clustalw']['parameters'] = array(
        '#type' => 'fieldset',
        '#title' => t('Parameters'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
	);


	$form['clustalw']['parameters']['basic'] = array(
        '#type' => 'fieldset',
        '#title' => t('Basic'),
	);

  $form['clustalw']['parameters']['basic']['type'] = array(
    '#type' => 'radios',
    '#title' => t('Sequence Type'),
    '#options' => array(
    		'DNA'		 =>t('DNA'),
    		'PROTEIN' =>t('Protein')),
    '#default_value' => 'DNA'
  );

	$form['clustalw']['parameters']['basic']['alignment'] = array(
		'#type' => 'radios',
		'#title' => t('Pairwise Alignment'),
		'#options' => array(
			'full' => t('Full'), // -ALIGN
			'fast' => t('Fast')), // null
		'#default_value' => 'full'
	);


/*
***Fast Pairwise Alignments:***
-KTUPLE=n    :word size
-TOPDIAGS=n  :number of best diags.
-WINDOW=n    :window around best diags.
-PAIRGAP=n   :gap penalty
-SCORE       :PERCENT or ABSOLUTE
*/
	$form['clustalw']['parameters']['fast'] = array(
        '#type' => 'fieldset',
        '#title' => t('Fast Options'),
        '#states' => array(
        	 'visible' => array(
        	 	  ':input[name="alignment"]' => array('value' => 'fast'),
        	 	),
        	),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,

	);
	$form['clustalw']['parameters']['fast']['wordSize'] = array(
		'#type' => 'textfield',
		'#title' => t('K-tuple (word) Size'),
		'#default_value' => '',
		'#size' => 2, 
		'#maxlength' => 3
	);
	$form['clustalw']['parameters']['fast']['window'] = array(
		'#type' => 'textfield',
		'#title' => t('Window Size'),
		'#default_value' => '',
		'#size' => 2, 
		'#maxlength' => 3
	);
	$form['clustalw']['parameters']['fast']['gapPenalty'] = array(
		'#type' => 'textfield',
		'#title' => t('Gap Penalty'),
		'#default_value' => '',
		'#size' => 2, 
		'#maxlength' => 3
	);
	$form['clustalw']['parameters']['fast']['diagonals'] = array(
		'#type' => 'textfield',
		'#title' => t('Number of Top Diagonals'),
		'#default_value' => '',
		'#size' => 2, 
		'#maxlength' => 3
	);
	$form['clustalw']['parameters']['fast']['scoringMethod'] = array(
		'#type' => 'radios',
		'#title' => t('Scoring Method'),
		'#options' => array(
			'percent' => t('Percent'),
			'absolute' => t('Absolute'),
			),
		'#default_value' => 'percent'

	);


/*
***Slow Pairwise Alignments:***
-PWMATRIX=    :Protein weight matrix=BLOSUM, PAM, GONNET, ID or filename
-PWDNAMATRIX= :DNA weight matrix=IUB, CLUSTALW or filename
-PWGAPOPEN=f  :gap opening penalty        
-PWGAPEXT=f   :gap opening penalty
*/
	$form['clustalw']['parameters']['full'] = array(
        '#type' => 'fieldset',
        '#title' => t('Full Options'),
        '#states' => array(
        	 'visible' => array(
        	 	  ':input[name="alignment"]' => array('value' => 'full'),
        	 	),
        	),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
	);
	$form['clustalw']['parameters']['full']['pwProteinMatrix'] = array(
		'#type' => 'select',
		'#title' => t('Protein weight matrix'),
		'#options' => array(
			'default' => t('Default'),
			'BLOSUM' => t('BLOSUM'),
			'PAM' => t('PAM'),
			'GONNET' => t('GONNET'),
			'ID' => t('Identity'),
			),
		'#states' => array(
        	 'visible' => array(
        	 	  ':input[name="type"]' => array('value' => 'PROTEIN'),
        	 	),
        	),
	);
	$form['clustalw']['parameters']['full']['pwDnaMatrix'] = array(
		'#type' => 'select',
		'#title' => t('DNA weight matrix'),
		'#options' => array(
			'default' => t('Default'),
			'IUB' => t('IUB'),
			'CLUSTALW' => t('ClustalW'),
			),
		'#states' => array(
        	 'visible' => array(
        	 	  ':input[name="type"]' => array('value' => 'DNA'),
        	 	),
        	),
	);
	$form['clustalw']['parameters']['full']['gapOpen'] = array(
		'#type' => 'textfield',
		'#title' => t('Gap Open Penalty'),
		'#default_value' => '',
		'#size' => 2, 
		'#maxlength' => 3
	);
	$form['clustalw']['parameters']['full']['gapExtend'] = array(
		'#type' => 'textfield',
		'#title' => t('Gap Extension Penalty'),
		'#default_value' => '',
		'#size' => 2, 
		'#maxlength' => 3
	);



/*
***Multiple Alignments:***
-NEWTREE=      :file for new guide tree
-USETREE=      :file for old guide tree
-MATRIX=       :Protein weight matrix=BLOSUM, PAM, GONNET, ID or filename
-DNAMATRIX=    :DNA weight matrix=IUB, CLUSTALW or filename
-GAPOPEN=f     :gap opening penalty        
-GAPEXT=f      :gap extension penalty
-ENDGAPS       :no end gap separation pen. 
-GAPDIST=n     :gap separation pen. range
-NOPGAP        :residue-specific gaps off  
-NOHGAP        :hydrophilic gaps off
-HGAPRESIDUES= :list hydrophilic res.    
-MAXDIV=n      :% ident. for delay
-TYPE=         :PROTEIN or DNA
-TRANSWEIGHT=f :transitions weighting
-ITERATION=    :NONE or TREE or ALIGNMENT
-NUMITER=n     :maximum number of iterations to perform
-NOWEIGHTS     :disable sequence weighting
*/
	$form['clustalw']['parameters']['multiple'] = array(
        '#type' => 'fieldset',
        '#title' => t('Multiple Alignment'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
	);
	$form['clustalw']['parameters']['multiple']['proteinMatrix'] = array(
		'#type' => 'select',
		'#title' => t('Protein weight matrix'),
		'#options' => array(
			'default' => t('Default'),
			'BLOSUM' => t('BLOSUM'),
			'PAM' => t('PAM'),
			'GONNET' => t('GONNET'),
			'ID' => t('Identity'),
			),
		'#states' => array(
        	 'visible' => array(
        	 	  ':input[name="type"]' => array('value' => 'PROTEIN'),
        	 	),
        	),
	);
	$form['clustalw']['parameters']['multiple']['dnaMatrix'] = array(
		'#type' => 'select',
		'#title' => t('DNA weight matrix'),
		'#options' => array(
			'default' => t('Default'),
			'IUB' => t('IUB'),
			'CLUSTALW' => t('ClustalW'),
			),
		'#states' => array(
        	 'visible' => array(
        	 	  ':input[name="type"]' => array('value' => 'DNA'),
        	 	),
        	),
	);
	$form['clustalw']['parameters']['multiple']['openGap'] = array(
		'#type' => 'textfield',
		'#title' => t('Gap Opening Penalty'),
		'#default_value' => '',
		'#size' => 3, 
		'#maxlength' => 3
	);
	$form['clustalw']['parameters']['multiple']['extendGap'] = array(
		'#type' => 'textfield',
		'#title' => t('Gap Extension Penalty'),
		'#default_value' => '',
		'#size' => 3, 
		'#maxlength' => 3
	);
	$form['clustalw']['parameters']['multiple']['gapDistance'] = array(
		'#type' => 'textfield',
		'#title' => t('Gap Separation penalty'),
		'#default_value' => '',
		'#size' => 2, 
		'#maxlength' => 3
	);
	$form['clustalw']['parameters']['multiple']['endGap'] = array(
		'#type' => 'checkbox',
		'#title' => t('End Gap Separation Penalty'),
		'#default_value' => '1',
	);
	$form['clustalw']['parameters']['multiple']['iteration'] = array(
		'#type' => 'select',
		'#title' => t('Output'),
		'#options' => array(
			'none' => t('None'),
			'tree' => t('Tree'),
			'alignment' => t('Alignment'),
			)
	);
	$form['clustalw']['parameters']['multiple']['iterations'] = array(
		'#type' => 'textfield',
		'#title' => t('Maximum Number of Iterations'),
		'#default_value' => '',
		'#size' => 2, 
		'#maxlength' => 3,
	);

	$form['clustalw']['parameters']['multiple']['clustering'] = array(
		'#type' => 'radios',
		'#title' => t('Clustering'),
		'#options' => array(
			'nj' => t('Neighbour Joining'),
			'upgma' => t('UPGMA'),
			),
		'#default_value' => 'nj'

	);


/*
	$form['clustalw']['parameters'][''] = array(
		'#type' => 'select',
		'#title' => t('Output'),
		'#options' => array(
			'' => t(''),
			'' => t(''),
			'' => t(''),
			'' => t(''),
			'' => t(''),
			)
	);

*/



	$form['clustalw']['parameters']['output'] = array(
        '#type' => 'fieldset',
        '#title' => t('Output'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
	);
   $form['clustalw']['parameters']['output']['format'] = array(
		'#type' => 'select',
		'#title' => t('Format'),
		'#options' => array(
			'CLUSTAL' => t('Clustal'),
         'GCG' => t('GCG'),
         'GDE' => t('GDE'),
         'PHYLIP' => t('PHYLIP'),
         'PIR' => t('PIR'),
         'NEXUS' => t('NEXUS'),
         'FASTA' => t('FASTA'),
		)
   );
	$form['clustalw']['parameters']['output']['outOrder'] = array(
		'#type' => 'select',
		'#title' => t('Output'),
		'#options' => array(
			'aligned' => t('Aligned'),
			'input' => t('Input')
			)
	);



	$form['clustalw']['controlField'] = array(
        '#type' => 'fieldset',
        '#title' => t('Job Control'),
	);


 $form['clustalw']['controlField']['clear'] = array(
 //   '#name' => 'clear',
    '#type' => 'button',
    '#value' => t('Reset'),
    '#attributes' => array(
      'onclick' => 'this.form.reset(); document.getElementById(\'edit-result\').innerHTML=\'\';return false;',
      'id'=>'clearButton')
  );

	$form['clustalw']['controlField']['lookup'] = array(
		'#type' => 'textfield',
		'#title' => t('Load results'),
		'#attributes' => array('placeholder' => 'Job ID'),
		'#size' => 9, 
		'#maxlength' => 12,
	);



  $form['clustalw']['controlField']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#ajax' => array(
      'callback' => 'ajax_clustalw_handler',
      'wrapper' => 'test',
      'effect' => 'fade',
      'progress' => array(
        'type' => 'throbber',
        'message' => t('Processing...')),
    ),
//    '#attributes' => array(
//      'id'=>'submitButton'),
  );




  $form['clustalw']['results'] = array(
    '#title' => '',
    // The prefix/suffix provide the div that we're replacing, named by
    // #ajax['wrapper'] above.
    '#prefix' => '<div id="results">',
    '#suffix' => '</div>',
    '#type' => 'item',

    '#ajax' => array(
      'callback' => 'ajax_runningJob_handler',
      'event' => 'click',
      'wrapper' => 'test',
      'effect' => 'fade',
      'progress' => array(
        'type' => 'throbber',
        'message' => t('Getting Job Status...')),
      )
  );

  $form['clustalw']['result'] = array(
    '#type' => 'item',
  );

  return $form;
}

/**
 * Callback element needs only select the portion of the form to be updated.
 * Since #ajax['callback'] return can be HTML or a renderable array (or an
 * array of commands), we can just return a piece of the form.
 */
function ajax_clustalw_handler($form, $form_state) {
	// 1)validate user input
	// 1.1) check for job id to look up
	if($form_state['values']['lookup']!=''){
		if(preg_match("#^(\d+)$#",$form_state['values']['lookup'],$match))
			$id=$match[1];
		else
			$message="Invalid job ID";

	}else if(substr_count($form_state['values']['sequence'],">")<2){
		$results="Clustal requires at least 2 sequences to align";

	// 1.2) check for valid data on submitted form
	}else{
		if($form_state['values']['sequence']==''){
			$message="You forgot to enter sequences to align.";
			$commands[]=ajax_command_css('#edit-sequence', array('border' => 'solid red 2px'));
			//$commands[]=ajax_command_css('#edit-sequence', array('color' => 'red', 'margin-left' => '6px'));

		// input looks good
		}else{

		    //  clear any error css that may have come up
		    //$commands[]=ajax_command_css('#edit-results', array('color' => 'green', 'margin-left' => '2px'));
		    $commands[]=ajax_command_css('#edit-sequence', array('border' => 'solid 1px #aacfe4'));
		    $commands[]=ajax_command_css('#edit-comments', array('border' => 'solid 1px #aacfe4'));



			//build argument/value pairs from the form
			$args['sequence']=$form_state['values']['sequence'];
			$args['arguments'][]='-TYPE='.$form_state['values']['type'];
			$args['arguments'][]='-OUTPUT='.$form_state['values']['format'];
			$args['arguments'][]='-OUTORDER='.$form_state['values']['outOrder'];



			//remove options that weren't changed
			foreach($form_state['values'] as $value){
				if($value=='' || $value=='default')
					unset($form_state['values'][$value]);
			}


			if($form_state['values']['alignment']=='fast'){
				if($form_state['values']['wordSize']) $args['arguments'][]='-KTUPLE='.$form_state['values']['wordSize'];
				if($form_state['values']['diagonals']) $args['arguments'][]='-TOPDIAGS='.$form_state['values']['diagonals'];
				if($form_state['values']['windows']) $args['arguments'][]='-WINDOW='.$form_state['values']['window'];
				if($form_state['values']['gapPenalty']) $args['arguments'][]='-PAIRGAP'.$form_state['values']['gapPenalty'];
				if($form_state['values']['scoringMethod']) $args['arguments'][]='-SCORE'.$form_state['values']['scoringMethod'];
			}else{
				if($form_state['values']['type']=='DNA')
						if($form_state['values']['pwDnaMatrix']!='default') $args['arguments'][]='-PWDNAMATRIX='.$form_state['values']['pwDnaMatrix'];
					else
						if($form_state['values']['pwProteinMatrix']!='default') $args['arguments'][]='-PWMATRIX='.$form_state['values']['pwProteinMatrix'];
				if($form_state['values']['gapOpen']) $args['arguments'][]='-PWGAPOPEN='.$form_state['values']['gapOpen'];
				if($form_state['values']['gapExtend']) $args['arguments'][]='-PWGAPEXT='.$form_state['values']['gapExtend'];
			}

			if($form_state['values']['type']=='DNA')
				if($form_state['values']['dnaMatrix']!='default') $args['arguments'][]='-DNAMATRIX='.$form_state['values']['dnaMatrix'];
			else
				if($form_state['values']['proteinMatrix']!='default') $args['arguments'][]='-MATRIX='.$form_state['values']['proteinMatrix'];

			if($form_state['values']['openGap']) $args['arguments'][]='-GAPOPEN='.$form_state['values']['openGap'];
			if($form_state['values']['extendGap']) $args['arguments'][]='-GAPEXT='.$form_state['values']['extendGap'];
			if($form_state['values']['gapDistance']) $args['arguments'][]='-GAPDIST='.$form_state['values']['gapDistance'];
			if($form_state['values']['endGap']==0) $args['arguments'][]='-ENDGAPS';
			if($form_state['values']['iteration']) $args['arguments'][]='-ITERATION='.$form_state['values']['iteration'];
			if($form_state['values']['iterations']) $args['arguments'][]='-NUMITER='.$form_state['values']['iterations'];
			$args['arguments'][]='-CLUSTERING='.$form_state['values']['clustering'];

		//	$args['arguments'][]=''.$form_state['values'][''];

		// submit job
		$id=clustalw_submit_xgrid($args);
		}
	}

   // should have either a look up id or submitted job id at this point
   if($id){

		// job has been submitted. continually get status updates until we're done
		while( !($status=="Finished" || $status=="Failed") ){
			$status=xgrid_status($id);
			sleep(2);
		}

		// job is done

		// CHECK TO SEE IF THERE IS ERROR TEXT IN STDOUT
		$jobResults=xgrid_results($id);
		if( strpos($jobResults,"ERROR: ") ){
			preg_match("#(.*?)====END OF STDOUT====#sm",$jobResults,$errors);
			$errors=preg_replace("/\n+/", "\n", $errors[1]);
			$errors=str_replace("\n","<br/>",$errors);
			$results="
				<div style=\"float:left;padding:6px;margin:6px; border:1px solid red;\">
				Yikes! There were some problems running your job. Here is the output from the clustalw program:<br/>
				$errors<br/><br/>
				If the message pertains to no sequences in file, double check the formatting of your sequences.
				</div>";
		}else{

			// generate some stats
			$time=xgrid_jobRunTime($id);
			if($time==0)
				$time="< 1 second";
			elseif($time==1)
				$time="1 second";
			else
				$time=$time." seconds";

			$submitDate=preg_match("#dateSubmitted = (.*?);#",xgrid_attributes($id),$match);
			$date=date_create_from_format('Y-m-d H:i:s O',$match[1]);


			$stdout=clustalw_getStdOut($id);
			$score=preg_match("#Alignment Score (\d+)#",$stdout,$match);
			$score=$match[1];

			// generate silly seq vs. seq scores table
			preg_match_all("#Sequence \d+:(.*?) (\d+) \w\w#",$stdout,$matches);
			for($i=0; $i<count($matches[1]); $i++){
				$inputSeqs[$i]['name']=$matches[1][$i];
				$inputSeqs[$i]['length']=$matches[2][$i];
			}

			preg_match_all("#Sequences \((\d+):(\d+)\) Aligned. Score:\s+(\d+)#",$stdout,$matches);
			$scoresTable="		<table id=\"topLevelTable\" class=\"tablesorter\" data-initial=\"sortme\">
				<thead>
					<tr>
						<th>Sequence</th>
						<th>Sequence</th>
						<th>Score</th>
					</tr>
				</thead>

				<tbody>\n";
			for($i=0; $i<count($matches[1]); $i++){
				$scoresTable.="<tr>
				<td>".$inputSeqs[$matches[1][$i]-1]["name"]."</td><td>".$inputSeqs[$matches[2][$i]-1]["name"]."</td><td>".$matches[3][$i]."</td>
				</tr>\n";
			}
			$scoresTable.="</tbody></table>\n";

			// display results
			$results='
			<fieldset><legend>Results</legend>
			<div style="float:left; clear:none;">
			<div style="font-size:12pt;font-weight:bold;margin-bottom:10px;">Job <b id="jobId">'.$id.'</b></div>

			<b>Submitted</b>&nbsp;&nbsp;'.date_format($date,'l, F jS, Y H:i:s O').'<br />
			<b>Compute Time</b>&nbsp;&nbsp;'.$time.'<br />
			</div>

			<div style="float:right; clear:none;">
				<fieldset style="margin-top:0px;"><legend>Download</legend>
				<a id="download">Alignment</a> <br />
				<a id="downloadScores">Scores</a> <br />
				<a id="downloadTree">Guide Tree</a>
				</fieldset>
			</div>

			<div style="float:left">

			<a id="sendToHMMer">Send alignment to HMMer</a> <br /><br />

			<fieldset style="margin-top:0px;">
			<legend>Alignment Score '.$score.'</legend>
			'.$scoresTable.'
			</fieldset>
			<br/>


			<applet code="jalview.bin.JalviewLite" width="870" height="400"
					       	archive="/'.drupal_get_path('module', 'clustalw').'/jalviewApplet.jar">
								<param name="file" value="/'.drupal_get_path('module', 'clustalw').'/clustalwPrintResults.php?id='.$id.'&type=align">
								<!-- <param name="treeFile" value="'.drupal_get_path('module', 'clustalw').'/clustalwPrintResults.php?id='.$id.'&type=tree"> -->
		                        <param name="embedded" value="true">
		                        <param name="defaultColour" value="Clustal">
		                        <param name="showSequenceLogo" value="true">
		                        <param name="showGroupConsensus" value="true">
		                      </applet>

		                      ';
	//							<param name="file" value="/data/'.$id.'">

			//$results.='<div style="font-family: monospace;border: 1px solid black; padding: 6px;">'.str_replace(" ","&nbsp;",str_replace("\n","<br/>",xgrid_results($id))).'</div>';
		    $results.='</div></fieldset>';
		} // end checking for errors in results
	}



  // update the results div with some new info
  $commands[]=ajax_command_html('#edit-result',$results);
//  $commands[]=ajax_command_css('#jobId', $argument);
 // $commands[]=ajax_command_invoke('#edit-results','click');

  return array('#type' => 'ajax', '#commands' => $commands);
}



function clustalw_submit_xgrid($args){

	//generate random name to submit the job as. xgrid_genRandomString is in the xgrid module
	$random=xgrid_genRandomString(6);
	$filename="ClustalW_".$random;

	//create program argument string
	foreach($args['arguments'] as $argument){
		$arg=strstr($argument,'=',true);
		$value=substr(strstr($argument,'='),1);
		$argsToSave[$arg]=$value;
		$arguments.="<string>$argument</string>\n";
	}

	$batch="<?xml version=\"1.0\" encoding=\"UTF-8\"?>
	<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
	<plist version=\"1.0\">
	<array>
	<dict>
		<key>inputFiles</key>
			<dict>
				<key>sequence</key>
				<dict>
					<key>fileData</key>
					<data>".base64_encode($args['sequence'])."</data>
				</dict>
			</dict>
		<key>name</key>
		<string>$filename</string>
		<key>taskSpecifications</key>
		<dict>
			<key>0</key>
			<dict>
				<key>command</key>
				<string>/vectorbase/scripts/ClustalW.sh</string>
				<key>arguments</key>
				<array>
					<string>$filename</string>
					$arguments
				</array>
			</dict>
		</dict>
	</dict>
	</array>
	</plist>";

	$jobId = xgrid_submit($batch);


	//save some job params in the db
	global $user;
	$argsToSave['user_name']=$user->name;
	$argsToSave['submitter_ip']=$_SERVER['REMOTE_ADDR'];
	$argsToSave['program']='ClustalW';
	$argsToSave['date']=date("m/d/y");
	$argsToSave['time']=date("H:i:s");
	$argsToSave['sequence']=$args['sequence'];
	xgrid_saveParams($jobId,$argsToSave);

	return $jobId;
}



function clustalw_getStdOut($id){
	$result=xgrid_results($id);
	preg_match("#(.*?)\n====END OF STDOUT====#s",$result,$match);
	return trim($match[1]);
}
function clustalw_getGuideTree($id){
	$result=xgrid_results($id);
	preg_match("#====START OF DND====\n(.*?)====END OF DND====#s",$result,$match);
	return $match[1];
}

function clustalw_getAlignOut($id){
	$result=xgrid_results($id);
	preg_match("#====START OF ALIGNMENT====\n(.*)#s",$result,$match);
	return trim($match[1]);
}


/**
 * Implements hook_block_info().
 */
function clustalw_block_info() {
  $blocks['recent']['info'] = t('ClustalW GUI for submitting jobs to xgrid');
  return $blocks;
}


