<?php

/**
 * @file
 * VectorBase's search module
 *
*/


// implements hook_block_info()
function vbsearch_block_info(){
  $blocks['vb_search'] = array(
    'info'	=>	t('VectorBase Custom Search'),
    'status'	=>	TRUE,
    //'region'	=>	'sidebar_first',
    'weight'	=>	0,
    'visibility'=>	1,
  );
  return $blocks;
}

function vbsearch_block_view($delta =''){
  $block = array();
  switch ($delta) {
    case 'vb_search':
	$block['title'] = 'Custom VB Search';
	$block['content'] = drupal_render(drupal_get_form('vbsearch_search_block_form'));
	break;
    }
  return $block;
}

function vbsearch_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'search_block_form') {
    $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Go'));
    // HTML5 placeholder attribute
    $form['search_block_form']['#attributes']['placeholder'] = t('Enter search terms');
    global $user;
    if ($user->uid > 0) $form['#token'] = FALSE;
    unset($form['#token']);
  } 
  else if ($form_id == 'apachesolr_search_custom_page_search_form') {
    $form['basic']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Go'),
    );

    unset($form['#token']);
  }
}



function vbsearch_search_block_form($form, &$form_state) {
  $form['keys'] = array(
    '#type' => 'textfield',
    '#size' => 35,
    '#required' => TRUE,
    '#attributes' => array('title' => t('Enter the terms you wish to search for.'),  'placeholder' => t('Search VectorBase')),

  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Go',
  );
  return $form;
}

function vbsearch_search_block_form_submit($form, &$form_state) {
  drupal_goto('vbsearch/' . $form_state['values']['keys']);
}

function vbsearch_do_search($keys) {
  drupal_set_title('VectorBase Search Results');
  $results = module_invoke('apachesolr_search', 'search_execute', $keys);
  return theme('search_results', array('results' => $results));
}


function escapeColon($term){
  $terms = explode(' ',$term);
  foreach ($terms as $i => $part){
    if (strpos($part, ':') !== false && strlen($part) > 0) {
	if ($part[0] !== '"' || $part[strlen($part) - 1] !== '"'){
	      $terms[$i] = "\"" . $part . "\"";
        }
    }
  }
  return implode (' ',$terms);
}


function vbsearch_apachesolr_query_alter($query) {
//Next two lines are needed to allow balancing of odd number of quote characters (should be in solrconfig.xml, but ok for now)
  $query->addParam('defType','edismax');
  $query->removeParam('qf');
  $query->addParam('qf', 'text');
  $query->addParam('qf', 'symbol');
  $query->addParam('qf', 'label');
  $query->addParam('qf', 'content');
  $query->addParam('qf', 'accession');
  $query->addParam('qf', 'annotations');
  $query->addParam('qf', 'description');
  $query->addParam('qf', 'phenotypes');
  $query->addParam('qf', 'genotypes');
  $query->addParam('qf', 'geolocations');

//Query boosting params
  $query->addParam('bq', 'site="Genome"^4');
  $query->addParam('bq', 'site="General"^6');

//Next four lines needed to enclose terms containing a colon with quotes (prevents some field-level searching)
  $queryTerm = $query->getParam('q');
  $queryTerm = escapeColon($queryTerm);
  $query->removeParam('q');
  $query->addParam('q', $queryTerm);

//Define fields to be returned to search module
  $query->addParam('fl', 'species_category');
  $query->addParam('fl', 'bundle_name');
  $query->addParam('fl', 'site');
  $query->addParam('fl', 'description');
  $query->addParam('fl', 'url');

//Define faceting parameters
  $query->addParam('facet', 'true');
  $query->addParam('facet.field', 'bundle_name');
  $query->addParam('facet.field', 'species_category');
  $query->addParam('facet.field', 'site');

//Define filters if requested
  $query->removeParam('fq');
  if (isset($_GET['bundle_name'])) {
    $query->addFilter('bundle_name', $_GET['bundle_name']);
  }
  if (isset($_GET['species_category'])) {
    $query->addFilter('species_category', $_GET['species_category']);
  }
  if (isset($_GET['site'])){
    $query->addFilter('site', $_GET['site']);
  }
  // Need to check post variables as well...
  if (isset($_POST['bundle_name'])) {
    $query->addFilter('bundle_name', $_POST['bundle_name']);
  }
  if (isset($_POST['species_category'])) {
    $query->addFilter('species_category', $_POST['species_category']);
  }
  if (isset($_POST['site'])){
    $query->addFilter('site', $_POST['site']);
  }
}


// facet api setup
function facetapi_bonus_facetapi_filters() {
  return array(
    'exclude_items' => array(
      'handler' => array(
	'label' => t('Exclude specified items'),
	'class' => 'FacetapiFilterExcludeItems',
      ),
    ),
    'rewrite_items' => array(
      'handler' => array(
	'label' => t('Rewrite facet items via callback function'),
	'class' => 'FacetapiFilterRewriteItems',
      ),
    ),
  );
}

//implements hook_menu()
function vbsearch_menu() {
  $items['vbsearch'] = array(
    'title' => t('VectorBase Search'),
    'page callback' => 'vbsearch_do_search',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
   );
  return $items;
}

//vbsearch splash page (default page)
function vbsearch_splash() {
  return t('howdy');
}

// This is temporary attempt to fix bug VB-1971. It still does not work.
function acquia_marina_theme_apachesolr_search_noresults() {
  $new_query = '/search/site/';
  $new_query_terms = '';
  $searched_value = '';
  $suggestion = '';
  $environments = apachesolr_load_all_environments();
  foreach ($environments as $env_id => $environment) {
    if (apachesolr_has_searched($env_id) && !apachesolr_suppress_blocks($env_id) ) {
      $query = apachesolr_current_query($env_id);
      if ($query) {
        $searched_value = $query->getParam('q');
        $params = explode(' ', $query->getParam('q'));
        foreach ($params as $param=>$value){
           $new_query_terms = $new_query_terms . $value . '* ';
        }
      }
    }
  }
  $query_result = 'No Results Found';
  $query_warning = '';
  if ($_GET['site']) {
    $query_warning .= 'Searching the <em>' . trim($_GET['site'], "\"") . '</em> domain';
  }
  if ($_GET['bundle_name']) {
    $query_warning .= ' and the <em>' . trim($_GET['bundle_name'], "\"") . '</em> subdomain';
  }
  if (strlen($query_warning) > 1) {       // give users the option to rerun this query without any filters (provided there ARE some set)
    $query_warning .= ': ';
    $query_result .= ' (<a href="'. $new_query . $searched_value . '">remove filters</a>)';
  }
 if ($new_query_terms) { // only offer a suggestion if a term was actually queried (i.e. search field isn't blank)
                $suggestion =  ' For example, you could use the following as your search term: <b><a href="'. $new_query . $new_query_terms . '">' . htmlspecialchars($new_query_terms) . '</a></b>';
        }


  return t('<br /><h3>' . $query_warning . $query_result . '</h3><ul>
	<li>TUse the asterisk wildcard character (*) to broaden  matching criteria.' . $suggestion . '</li>
	<li>Check if your spelling is correct, or try removing filters.</li>
	<li>Remove quotes around phrases to match each word individually: <em>"Anopheles gambiae"</em> will return fewer results than <em>Anopheles gambiae</em>.</li>
	<li>You can require or exclude terms using + and -: <em>Anopheles +gambiae </em> will require a match on <em>gambiae</em> while <em>Anopheles -gambiae</em> will exclude results that contain <em>gambiae</em>.</li>
	</ul>');

}
