<?php

/* 
   i hate drupal/php! this module was originally done when drupal 7 was first released and all available documentation and everyone as EBI was using drupal 6 - but VB likes to do things its own way?!?
   there have had to be a load of hacks introduced upon discovery that many thigns break once you port things to a drupal instance using postgres rather than mysql or sqlite - again VB is as VB is?!?
   also getting things up and running at ND with its strange system against the clock means that to get it running again back at EBI i've disabled a load of stuff.
*/

$gene_info_switch=0;

define('TEST_FORM_TOTAL_STEPS', 2);

function createdir($dir) {    
    if (!is_dir($dir)) {      
        mkdir ($dir,0777,true);
    }                         
}                             

function name2dir($name) {    
    $md5=md5($name);          
    $dir='';                  
    for($i = 0; $i < 2; $i++) {
        $dir .= substr($md5, $i*2, 2) . "/";
    }                         
    $dir=strtoupper($dir);    
    return $dir; // $dir.$name;
}                              

function strip($string) {
    $string = str_replace(' ', '_', $string);
    $string = preg_replace("/[^A-Za-z0-9\-_\.]/","_",$string);
    $string = preg_replace("/_{2,}/","_",$string);
    return $string;     
}     

function ClientLogin($service,$user,$pass) {
    
/* 
        curl_setopt($ch, CURLOPT_URL, $path);
        curl_setopt($ch, CURLOPT_FAILONERROR,1);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION,1);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
        curl_setopt($ch, CURLOPT_TIMEOUT, 15);
        curl_setopt($ch, CURLOPT_PROXY, "www-proxy.ebi.ac.uk");
        curl_setopt($ch, CURLOPT_PROXYPORT, 3128);
        $retValue = curl_exec($ch);                      
        curl_close($ch);
*/

    $proxy = ""; // (variable_get('cap_base_uri')=="data/web/vbpre/sites/default/files/ftp/cap_base/") ? "" : "-x www-proxy.ebi.ac.uk:3128";
    return trim(`curl $proxy -s -d Email=$user -d Passwd=$pass -d service=$service https://www.google.com/accounts/ClientLogin | tr ' ' \\n | grep Auth= | sed -e 's/Auth=//'`);

}

function FusionTableUrlEncode($user,$pass,$service,$url,$sql) {
    $auth=ClientLogin($service,$user,$pass);
    $cmd="curl -x www-proxy.ebi.ac.uk:3128 -L -s -H \"Authorization: GoogleLogin auth=$auth\" --data-urlencode sql=\"$sql\" $url";
    $out=`$cmd | grep -v Gene_Cap_ID`;
    $rs=explode(",",trim($out));
    return($rs);
}

function FusionTablePost($user,$pass,$service,$url,$sql) {
    $auth=ClientLogin($service,$user,$pass);
    $proxy = "";//(variable_get('cap_base_uri')=="data/web/vbpre/sites/default/files/ftp/cap_base/") ? "" : "-x www-proxy.ebi.ac.uk:3128";
    $cmd="curl $proxy -L -s -H \"Authorization: GoogleLogin auth=$auth\" -d sql=\"$sql\" $url";
    $out=`$cmd | grep -v Gene_Cap_ID`;
    $rs=explode(",",trim($out));
    $params = array('body' => $sql."\n\n".$out,'subject' => '[Cap] meta query');
    $out=drupal_mail('GeneAnnotation', 'notice',  'dsth@cantab.net', language_default(), $params, 'cap_qc@vectorbase.org',TRUE);
    return($rs);
}

function GeneAnnotation_init() {
    $inifilepath = drupal_get_path('module', 'GeneAnnotation') . '/cap_drupal/GeneAnnotation.ini';
    define("BINARY", "Save was binary");

    $inifile = parse_ini_file($inifilepath);
    $species_metau = str_replace('_',' ',$inifile['SPECIES_META_UP']);
    $species_metau_array = explode(',', $species_metau);
    variable_set('species_metau',  $species_metau_array);

    $species_modelu = str_replace('_',' ',$inifile['SPECIES_MODEL_UP']);
    $species_modelu_array = explode(',', $species_modelu);
    variable_set('species_modelu',  $species_modelu_array);

    $species_modeld = str_replace('_',' ',$inifile['SPECIES_MODEL_DWNLD']);
    $species_modeld_array = explode(',', $species_modeld);
    variable_set('species_modeld',  $species_modeld_array);

    variable_set('feat_regex','CDS|exon|gene|mRNA|tRNA|pseudogenic_tRNA|rRNA|miRNA|ncRNA|pseudogene');

    $cap_meta_table = str_replace('_',' ',$inifile['CAP_META_TABLE_LIST']);
    $cap_meta_table_array = explode(',', $cap_meta_table);
    $cap_meta_table_assoc=array();
    foreach ($cap_meta_table_array as $item) {
        list($key,$value)=explode(":",$item);
        $cap_meta_table_assoc[$key]=$value;
    }

    foreach ($species_metau_array as $item) {
        if (!array_key_exists($item,$cap_meta_table_assoc)) {
            echo "There must be a table defined for $item in ini file";
            exit;
        }
    }

    variable_set('cap_meta_table_list',$cap_meta_table_assoc);
    variable_set('cap_meta_table',  $inifile['CAP_META_TABLE']);
    variable_set('filelimit', $inifile['GFFFILELIMIT']);
    variable_set('curl', $inifile['CURL_BASH_WRAP']);
    variable_set('update_sha1_pass', $inifile['UPDATESHA1PASS']);
    variable_set('fasta_indexer', $inifile['FASTA_INDEXER']);
    variable_set('basedir',  $inifile['BASEDIR']);
    variable_set('genenames',  $inifile['GENENAMES']);
    variable_set('auto_scfnames', $inifile['AUTOSCFNAMESFILE']); // goes in base dir - has All names for autocompletion (not sure if keeping?!?)
    variable_set('tabix',    $inifile['TABIX']); // extracts from variable_get('basedir').'/gff/'.$species.'.gff.gz'; into $basedir.'/tmp/'
    variable_set('gene_indexer',    $inifile['GENE_INDEXER']); // extracts from variable_get('basedir').'/gff/'.$species.'.gff.gz'; into $basedir.'/tmp/'
    variable_set('cap_meta_table',  $inifile['CAP_META_TABLE']);
    variable_set('cap_meta_url',  $inifile['CAP_META_URL']);
    variable_set('cap_meta_user',  $inifile['CAP_META_USER']);
    variable_set('cap_meta_pass',  $inifile['CAP_META_PASS']);
    variable_set('cap_meta_service',  $inifile['CAP_META_SERVICE']);
    variable_set('cap_admin_uid', $inifile['CAP_ADMIN_UID']);
    variable_set('cap_base_uri', $inifile['CAP_BASE_URI']);

}

function GeneAnnotation_help() { }

function GeneAnnotation_theme() {
    return array(
        'my_tab' => array(
            //y set template file
            'template' => 'cap',
            'variables' => array('title' => NULL),
        ),
/*         'my_cv' => array(
            //y set template file
            'template' => 'cv',
            'variables' => array('title' => NULL),
        ),
*/
    );
}

function GeneAnnotation_menu() {

/*
    $items['intro'] = array(
        'title' => 'Overview',
        'page callback' => 'download_accordion',
        'access callback' => TRUE,
    ); 
*/

    $items['cap'] = array(
        'title' => 'Community Annotation Portal',
        'page callback' => 'cap_frontpage',
        'access callback' => TRUE,
        'access arguments' => array('access content')
    );

    $items['data/web/vbpre/sites/default/files/ftp/cap_base'] = array(
        'title' => 'Community Annotation Portal',
        'page callback' => 'cap_frontpage',
        'access callback' => TRUE,
        'access arguments' => array('access content')
    );

    $items['cap/%/gff'] = array(
        'title'            => 'Download file',
        'page callback'	   => 'download_gff_file',
        'page arguments'   => array(1),
    'access callback' => 'user_is_logged_in', 
        // 'access arguments' => array('access content')
    );
        
    $items['meta'] = array(
        'page callback' => 'meta_data_list',
        'access arguments' => array('access content')
    );

    $items['uploaded'] = array(
        'page callback' => 'uploaded_files_list',
        'access callback' => TRUE,
        'access arguments' => array('access content')
    );

    $items['nd_uploaded'] = array(
        'page callback' => 'uploaded_files_list',
        'access callback' => TRUE,
        'access arguments' => array('access content')
    );

    $items['capadmin/%'] = array(
        'page callback'	   => 'grab_json',
        'page arguments'   => array(1),
        'access arguments' => array('access content')
    );

    $items['uploaded/%'] = array(
        'page callback'	   => 'grab_a_submission_with_rest',
        'page arguments'   => array(1),
        'access arguments' => array('access content')
    );

    $items['metadelete/%'] = array(
        'page callback'	   => 'delete_meta_entry',
        'page arguments'   => array(1),
        'access arguments' => array('access content')
    );

    $items['update/%'] = array(
        'page callback'	   => 'generic_update',
        'page arguments'   => array(1),
        'access arguments' => array('access content')
    );

/*
    $items['uploadeddelete/%'] = array(
        'page callback'	   => 'delete_uploaded_entry',
        'page arguments'   => array(1),
        'access arguments' => array('administer access control')
    );
*/

    $items['uploadedignore/%'] = array(
        'page callback'	   => 'ignore_uploaded_entry',
        'page arguments'   => array(1),
        'access arguments' => array('access content')
    );

    $items['submission'] = array(
        'title' => t('Gff Submission'),
        'page callback' => 'gff_submission_form_wrapper',
        'access arguments' => array('access content'),
        'description' => t('Submission'),
        'type' => MENU_CALLBACK,
    );

    $items['cap_download'] = array(
        'title' => 'Dependent dropdown',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('gff_download_ajax_form'),
        'access callback' => TRUE,
        'weight' => 4,
        'access arguments' => array('access content'),
    );

    return $items;
}

function GeneAnnoation_help($path, $arg) { }

function GeneAnnoation_permission() {
/*
    return array(
        'access direct download file' => array( 'title' => t('') ),
        'administer download file' => array( 'title' => t('Administer download file') )
    );
*/
}

function GeneAnnotation_js_alter(&$js) {
//  $jquery_path = drupal_get_path('module','GeneAnnotation') . '/jquery-compressed-google/jquery.min.js';
//  $javascript[$jquery_path] = $javascript['misc/jquery.js'];
//  $javascript[$jquery_path]['version'] = '1.5.2';
//  $javascript[$jquery_path]['data'] = $jquery_path;


  // Finally remove the original jQuery
//  unset($js['misc/jquery.js']);
}

function cap_frontpage() {

    $title = t('Click sections to expand or collapse:');

    $build['myelement'] = array(
        '#theme' => 'my_tab',
        '#title' => $title,
    );

    drupal_add_js(
        "var data = " . drupal_json_encode($allnames) . ";", 
        'inline'
    );
    
    drupal_add_js(
        drupal_get_path('module', 'GeneAnnotation') 
          . '/jquery-compressed-google/jquery.min.js', 
        $options
    );                      

    drupal_add_js(
        drupal_get_path('module', 'GeneAnnotation') 
          . '/jquery-compressed-google/jquery-ui.min.js', 
        $options
    );

    drupal_add_css(
        drupal_get_path('module', 'GeneAnnotation') 
        . '/jquery-compressed-google/jquery-ui.css', 
        array('group' => CSS_DEFAULT, 'every_page' => TRUE)
    );

    drupal_add_js(
        drupal_get_path('module', 'GeneAnnotation') . '/js/temp.js', 
        $options
    );

    drupal_add_css(
        drupal_get_path('module', 'GeneAnnotation') . '/js/smoothness.css', 
        array('group' => CSS_DEFAULT, 'every_page' => TRUE)
    );

    drupal_add_css(
        drupal_get_path('module', 'GeneAnnotation') . '/css/jquery-ui.css', 
        array('group' => CSS_DEFAULT, 'every_page' => TRUE)
    ); 

    drupal_add_css(
        drupal_get_path('module', 'GeneAnnotation') . '/css/box.css', 
        array('group' => CSS_DEFAULT, 'every_page' => TRUE)
    ); 

    drupal_add_css(
        drupal_get_path('module', 'GeneAnnotation') . '/css/tablescroll_cap_meta.css', 
    array('group' => CSS_DEFAULT, 'every_page' => TRUE)
    );

    $output = drupal_render($build);

    return $output;
}

function delete_meta_entry($gene_id = NULL ,$format = NULL) {

    if($GLOBALS['user']->uid != variable_get('cap_admin_uid')) { 
        return drupal_access_denied();  
    }

    $num_deleted = db_delete('cap_gene_node')->condition('gene_id', $gene_id, '=')->execute();
    drupal_set_message('Wiping entries for gene ID='.$gene_id.'. Deleted entries : '.$num_deleted);
    drupal_goto(variable_get('cap_base_uri'));
}

function generic_update($a) {

    if($GLOBALS['user']->uid != variable_get('cap_admin_uid')) { 
        return drupal_access_denied();  
    }

    if(!preg_match("/^pass=(\S+?):table=(\S+?):([\s\w]+?)=([\s\w]+?):([\s\w]+?)=([\s\w]+)$/", $a, $matches)) {
        drupal_set_message('give me string pass=pass:table=table:oldcol=old val:condcol=condval','warning');
        drupal_goto(variable_get('cap_base_uri'));
    }
        
    $sha1pword = variable_get('update_sha1_pass');
    // $ar = explode(':', $a);
    if (sha1($matches[1])!=$sha1pword) {
        drupal_set_message('wrong password','error');
        drupal_goto(variable_get('cap_base_uri'));
    }

    $table;

    if ($matches[2]!='gene'&&$matches[2]!='file') {
        drupal_set_message('must give table to modify (gene/file)','error');
        drupal_goto(variable_get('cap_base_uri'));
    }

    $table = 'cap_'.$matches[2].'_node';

    $num_updated = db_update($table)->fields(array($matches[3] => $matches[4] ))->condition($matches[5], $matches[6], '=')->execute();

    drupal_set_message($table.' update set '.$matches[3].'='.$matches[4].'  where '.$matches[5].'='.$matches[6].'. updated entries : '.$num_updated, 'warning');
    drupal_goto(variable_get('cap_base_uri'));

}

function ignore_uploaded_entry($a = NULL ,$format = NULL) {

    if($GLOBALS['user']->uid != variable_get('cap_admin_uid')) { 
        return drupal_access_denied();  
    }

    if(!preg_match("/^pass=(\S+?):sbm_id=(\S+?)$/", $a, $matches)) {
        drupal_set_message('give me string pass=pass:sbm_id=value','warning');
        drupal_goto(variable_get('cap_base_uri'));
    }

    if (sha1($matches[1])!='f2b3575186e3db43c7f19d356b6d40afbe25ce57') {
        drupal_set_message('wrong password','error');
        drupal_goto(variable_get('cap_base_uri'));
    }
    $num_updated = db_update('cap_file_node')->fields(array('file_name' => 'IGNORE' ))->condition('sbm_id', $matches[2], '=')->execute();
    drupal_set_message('Ignoreing entry for file submission sbm_id='.$matches[2].'. updated entries : '.$num_updated,'warning');
    drupal_goto(variable_get('cap_base_uri'));
}

function grab_a_submission_with_rest($file = NULL ,$format = NULL) {

    if($GLOBALS['user']->uid != variable_get('cap_admin_uid')) { 
        return drupal_access_denied();  
    }

    $filepath = variable_get('basedir').'/sbm/'.name2dir($file).$file;

    if (!file_exists($filepath)) { 
        die("file does not exist");
    }

    $filepath = addcslashes($filepath,'() ');
    $contents = `cat $filepath`;
    $start = '<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">'
      .'<html lang="en"><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><title>title</title></head><body><pre>';
    $end = '</body></html>';
    print $start.$contents.$end;
    exit;

}

function download_gff_file($filename) {

    //if($GLOBALS['user']->uid != variable_get('cap_admin_uid')) { 
    //    return drupal_access_denied();  
    //}

    $filepath = variable_get('basedir').'/tmp/'.$filename;
    
    if (!file_exists($filepath)) { 
        return drupal_access_denied(); 
    }

    if (FALSE) {
        $fd = fopen($filename,'r') ;
        $file=$fd;
        if ($fd) {
            $fsize = filesize($file);
            $path_parts = pathinfo($file);
            header("Content-type: application/octet-stream");
            header("Content-Disposition: attachment; filename=\""
                . $fname
                . "\""); // use 'attachment' to force a download
            header("Content-length: $fsize");
            header("Cache-control: private"); //use this to open files directly
            while(!feof($fd)) {
                $buffer = fread($fd, 2048);
                echo $buffer;
            }
            fclose ($fd);
        } else  {
            return drupal_access_denied();
        }
    }

    $userid = $GLOBALS['user']->uid;

    $file_obj = (object) array(
        'uid' => $userid,
        'uri' => $filepath,
        'filemime' => file_get_mimetype($filepath),
        'status' => 1,
    ); 

    $dest = file_default_scheme();

    $file_obj->filemime =  file_get_mimetype($filename);
    $file_obj->filepath = $filepath;
    $file_obj->filesize = filesize($filepath);
    $file_obj->uid = $userid;
    $file_obj->timestamp = time();
    $file_obj->list = 1;
    $file_obj->new = true;

    $file_obj = file_copy($file_obj, 'temporary://');

    drupal_write_record('files', $file_obj);

    //print_r($file_obj); 
    $fid = $file_obj->fid;
    // print '<pre>';print_r($fid); print '</pre>';

    $file = $file_obj;

    if (empty($fid) || empty($file) || !$file->status) { return drupal_access_denied(); }

    $headers = array(
        'Content-Type'              => 'force-download',
        'Content-Disposition'       => 'attachment; filename="' . $file->filename . '"',
        'Content-Length'            => $file->filesize,
        'Content-Transfer-Encoding' => 'binary',
        'Pragma'                    => 'no-cache',
        'Cache-Control'             => 'must-revalidate, post-check=0, pre-check=0',
        'Expires'                   => '0',
        'Accept-Ranges'             => 'bytes'
    );

    if(substr($filename,-4,4)=='.gff' || substr($filename,-3,3)=='.fa') {
        if (in_array(-1, $headers)) { return drupal_access_denied(); }
        if (count($headers)) { file_transfer($file->uri, $headers); }
    } else {
        $start = '<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">'
        .'<html lang="en"><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><title>title</title></head><body><pre>';
        $end = '</body></html>';
        $tmp = `cat $filepath`;
        print $start.$tmp.$end;
        exit;
    }
}

function gff_submission_form_wrapper() {
    return drupal_get_form('gff_submission_form');
}

function gene_info_submission_form_wrapper() {
    return drupal_get_form('gene_info_submission_form');
}

function gene_info_submission_form_validate($form, &$form_state) {

    if($GLOBALS['user']->uid < 1 ) { return drupal_access_denied();  }
    
        if (
            !$form_state['values']['genestat'] 
            && !$form_state['values']['gene_sym']
            && !$form_state['values']['description']
            && !$form_state['values']['pmid']
            && !$form_state['values']['comment']
        ) { form_set_error('', t('Please fill something in.')); } 

    if ($form_state['values']['genestat'] && !$form_state['values']['status_just']) { form_set_error('', t('Please give a justification for a gene status change.')); } 
    if ($form_state['values']['gene_sym'] && !$form_state['values']['gene_sym_just']) { form_set_error('', t('Please give a justification for the gene symbol.')); } 
    if ($form_state['values']['description'] && !$form_state['values']['desc_just']) { form_set_error('', t('Please give a justification for the gene description.')); } 
}

function gene_info_submission_form_submit($form, &$form_state) {
    
    if($GLOBALS['user']->uid < 1 ) {
        return drupal_access_denied(); 
    }

    $gene_id = $form_state['values']['howmany_select'];
    $c_user=variable_get('cap_meta_user');
    $c_pass=variable_get('cap_meta_pass');
    $c_url=variable_get('cap_meta_url');
    
    $c_table_assoc=variable_get('cap_meta_table_list');
    $c_table=$c_table_assoc[$form_state['values']['species']]; // variable_get('cap_meta_table');
    
    $c_service=variable_get('cap_meta_service');

    $genstat    =   str_replace("'",'_',$form_state['values']['genestat']?$form_state['values']['genestat']:'');
    $genstatj   =   str_replace("'",'_',$form_state['values']['status_just']?$form_state['values']['status_just']:'');
    $gensym     =   str_replace("'",'_',$form_state['values']['gene_sym']?$form_state['values']['gene_sym']:'');
    $gensymj    =   str_replace("'",'_',$form_state['values']['gene_sym_just']?$form_state['values']['gene_sym_just']:'');
    $gendesc    =   str_replace("'",'_',$form_state['values']['description']?$form_state['values']['description']:'');
    $gendescj  =   str_replace("'",'_',$form_state['values']['desc_just']?$form_state['values']['desc_just']:'');
    $genpmid    =   str_replace("'",'_',$form_state['values']['pmid']?$form_state['values']['pmid']:'');
    $gencomm    =   str_replace("'",'_',$form_state['values']['comment']?$form_state['values']['comment']:'');
    
    $sql = "INSERT INTO $c_table (Gene_Cap_ID,Species,"
      ."Meta_Data_Status,Gene_Status,Gene_Status_Just,Gene_Symbol,Gene_Symbol_Just,Gene_Description,Gene_Description_Just,PMIDs,Submitter_Comments,Submitter,Submission_Date) VALUES ('"
            .$form_state['values']['howmany_select']."','"
            .$form_state['values']['species']."','UNINCORPORATED','"
            .$genstat."','"
            .$genstatj."','"
            .$gensym."','"
            .$gensymj."','"
            .$gendesc."','"
            .$gendescj."','"
            .$genpmid."','"
            .$gencomm."','"
            .$GLOBALS['user']->name."','"
            .date('l jS \of F Y h:i:s A')."')";

    $response = FusionTablePost (
        $c_user,
        $c_pass,$c_service,
        $c_url,$sql
    );

    if (preg_match("/^rowid\s+(\d+)$/",$response[0],$match)) { // rowid 15302
        $message = '<p>Gene meta-data submission for gene ID='.$form_state['values']['howmany_select']
            .' (sbm='.$match[0].') successful.</p>';
        drupal_set_message($message);
    } else {
        drupal_set_message("There seems to be a problem communicating with the remote server. "
          ."Please try again later. If the problem continues please email cap_qc@vectorbase.org.",'warning');
    }

/*
    $sbmid = db_insert('cap_gene_node')->fields(
        array(
            'user' => $GLOBALS['user']->name,
            'submitter_name' => 'blah',
            'user_email' => $GLOBALS['user']->mail,
            'uid' => $GLOBALS['user']->uid,
            'ip' => $GLOBALS['user']->hostname,
            'edited'        => 1,
            'species'       => $form_state['values']['species'],
            'gene_id'       => $form_state['values']['howmany_select'],
            //// clearly must check acceptable combinations - i.e. gene_sym only with justification etc..
            'gene_sym'      => $form_state['values']['gene_sym']        ?   $form_state['values']['gene_sym']       : '',
            'sym_just'      => $form_state['values']['gene_sym_just']   ?   $form_state['values']['gene_sym_just']  : '', 
            'description'     => $form_state['values']['description'] ? $form_state['values']['description'] : '',
            'desc_just'     => $form_state['values']['desc_just'] ? $form_state['values']['desc_just'] : '',
            'status_just'   => $form_state['values']['status_just']     ?   $form_state['values']['status_just']    : '',
            'status'        => $form_state['values']['genestat']        ?   $form_state['values']['genestat']       : '',
            'pmid'          => $form_state['values']['pmid']            ?   $form_state['values']['pmid']           : '',
            'comments'      => $form_state['values']['comment']         ?   $form_state['values']['comment']        : '', 
        )
    )->execute();

    $message = '<p>Gene meta-data submission for gene ID='.$form_state['values']['howmany_select']
      .' successful. Please quote submission id='.$sbmid.' in any enquiries you send.</p>';

    drupal_set_message($message);
*/

}

function gene_info_submission_form($form, &$form_state) { 

    // $GLOBALS["bored"] = 1;

    $default = !empty($form_state['values']['howmany']) ? $form_state['values']['howmany'] : 1;

    $species = variable_get('species_metau');

    $form['species'] = array(
        '#type' => 'select',
        '#title' => t('Species'),
        '#options' => drupal_map_assoc($species),
        // '#states' => array( 'visible' => array( ':input[name="sbm"]' => array('value' => 'gff'), ), ), 
    );

    $form['howmany_select'] = array(
        '#title' => t('Gene ID'),
        '#type' => 'textfield',
        '#size' => 20,
        '#maxlength' => 50,
        '#description' => t('Enter a gene stable ID as it appears in gff and press enter.'),
        '#ajax' => array(
        'callback' => 'ajax_callback_for_meta_table', // deprecated
        'wrapper' => 'checkboxes-div',
        'method' => 'replace',
        'effect' => 'slide',
        //'effect' => 'fade',
        'speed' => 'fast',
        'prevent' => 'click',
        'progress' => 'interval',
        'event' => 'submit',
        'keypress' => TRUE,
        'prevent' => 'click',
        ),
        '#attributes' => array('class' => array('inputything')),
    );

    if($GLOBALS['user']->uid < 1 ) {
        $form['howmany_select']['#attributes'] = array('readonly' => 'readonly');
        $form['howmany_select']['#default_value'] = t('Log in to use this!');
    }

    $form['gene_info'] = array(
        '#title' => t("Gene Information Form"),
        '#prefix' => '<div id="checkboxes-div">',
        '#suffix' => '</div>',
        '#type' => 'fieldset',
    );

    $ret=-2;
    $gene_id = '';

    if(!empty($form_state['values']['howmany_select'])) {
        $gene_id = $form_state['values']['howmany_select'];
        $c_user=variable_get('cap_meta_user');
        $c_pass=variable_get('cap_meta_pass');
        $c_url=variable_get('cap_meta_url');
        
        $c_table_assoc=variable_get('cap_meta_table_list');
        $c_table=$c_table_assoc[$form_state['values']['species']]; // variable_get('cap_meta_table');
        
        $c_service=variable_get('cap_meta_service');

        $response = FusionTablePost (
            $c_user,
            $c_pass,$c_service,
            $c_url,"SELECT Submitter,Gene_Cap_ID,Gene_Canon_ID,Species,Meta_Data_Status,Gene_Status,Gene_Symbol,Gene_Synonyms,Gene_Description,Gene_Family,PMIDs,Submission_Date FROM $c_table where Gene_Cap_ID = '$gene_id'"
        );

/*        
        $form['gene_info']['unknown'] = array(
            '#type' => 'markup',
            '#markup' => '<div class="ino_msgbox"><pre>what the fuck-'."\nout=".count($response)."\n".'-seriously</pre><div>',
            // '#markup' => '<div class="ino_msgbox"><pre>what the fuck-'."\n".$c_service."\n".$c_user."\n".$c_pass."\n".$c_url."\n".$auth."\n".$response."\nout=".$t."\n".'-seriously</pre><div>',
            '#attributes' => array('id' => 'species-filler'),
        );
        return $form;
*/
        
        if(count($response)==1) {
            $gene_info_switch = 1;
        } elseif (count($response)>=3) {
            $ret=-1;
            $gene_info_switch = 0;
        } else {      
            $form['gene_info']['unknown'] = array(
                '#type' => 'markup',
                '#markup' => '<div class="info_msgbox">There is a problem with remote serrver please try later. Please email cap_qc@vectorbase.org if the problem continues ('.count($response).')</div>',
                '#attributes' => array('id' => 'species-filler'),
            );
            return $form;
        }


    } else {
        $gene_info_switch = 0;
    }

/*
    if(!empty($form_state['values']['howmany_select'])) {
        $gene_id = $form_state['values']['howmany_select'];
        $ret=check_gene_entry($gene_id);
        if($ret!=-1) {
            $gene_info_switch = 1;
        }
    } else {
        $gene_info_switch = 0;
    }
*/

    if($gene_info_switch) {

        $basedir = variable_get('basedir');
        $gene_names = variable_get('genenames');

        $exists = `grep -P '^$gene_id$' $basedir/gff/$gene_names`;

        if($exists=='') {

            $form['gene_info']['unknown'] = array(
                '#type' => 'markup',
                '#markup' => '<div class="info_msgbox">You have entered an unknown gene ID. '
                  .'This means that: (1) you have a typo in the Gene ID (IDs should be in the form YYTMPxxxxxx), or (2) '
                  .'you are submitting meta data for a new gene model that you have submitted via the "Submit Models" form. '
                  .'In this case, make sure you use the SAME ID in both cases. See FAQs for more details.</div>',
                '#attributes' => array('id' => 'species-filler'),
            );
        }

/*
        $form['gene_info']['species'] = array(
            '#type' => 'select',
            '#title' => t('Species'),
            '#options' => drupal_map_assoc($species),
            // '#states' => array( 'visible' => array( ':input[name="sbm"]' => array('value' => 'gff'), ), ), 
        );
 */

        $form['gene_info']['genestat'] = array(
            '#type' => 'radios',
            '#title' => t('[A] Gene Status'),
            '#options' => array( 
                'approve' => t('Approve'), 
                'pseudo'   => t('Make pseudogene (and approve)'),
                'delete'   => t('Mark for deletion'),
            ),
            '#prefix' => '<div class="ui-widget">',
            '#suffix' => '</div>',
            '#attributes' => array('id' => 'species-filler'),
        );

        $form['gene_info']['warning1'] = array(
            '#type' => 'container',
            '#children' => '<div class="info_msgbox">As you are changing the gene status you must give a justification in textbox</div>',
            '#states' => array( 'visible' => array( ':input[name="genestat"]' => array(  '!value' => false,  ), ),  ), //'checked' => TRUE, // 'value' => 'approve', 
        );

        $form['gene_info']['status_just'] = array(
            '#type' => 'textarea',
            '#title' => t('Gene Status Change Justification *'), // try markup to make it red?!?
            '#rows' => 3,
            '#maxlength' => 1000,
            '#prefix' => '<div class="ui-widget" style="width: 65%;">',
            '#suffix' => '</div>',
            '#states' => array( 'visible' => array( ':input[name="genestat"]' => array(  '!value' => false,  ), ),  ), //'checked' => TRUE, // 'value' => 'approve', 
            '#description' => 'Please fill this out if you are changing the status of a gene.',
            '#attributes' => array('class' => array('inputything')),
        );

        $form['gene_info']['gene_sym'] = array(
            '#type' => 'textfield',
            '#title' => t('[B] Gene Symbol'),
            '#size' => 50,
            '#maxlength' => 50,
            '#prefix' => '<div class="ui-widget">',
            '#suffix' => '</div>',
            '#attributes' => array('class' => array('inputything')),
        );

        $form['gene_info']['warning2'] = array(
            '#type' => 'container',
            '#children' => '<div class="info_msgbox">Please give a justification for your choosen gene symbol in textbox</div>',
            '#states' => array( 'visible' => array( ':input[name="gene_sym"]' => array(  '!value' => '',  ), ),  ), 
        );

        $form['gene_info']['gene_sym_just'] = array(
            '#type' => 'textarea',
            '#title' => t('Gene Symbol Justification *'),
            '#rows' => 3,
            '#maxlength' => 1000,
            '#prefix' => '<div class="ui-widget" style="width: 65%;">',
            '#suffix' => '</div>',
            '#states' => array( 'visible' => array( ':input[name="gene_sym"]' => array(  '!value' => '',  ), ),  ), 
            '#description' => 'You must fill this out if you are assigning a gene symbol.',
            '#attributes' => array('class' => array('inputything')),
        );

        $form['gene_info']['description'] = array(
            '#type' => 'textfield',
            '#title' => t('[C] Gene Description'),
            '#size' => 50, 
            '#maxlength' => 128,
            '#prefix' => '<div class="ui-widget">',
            '#suffix' => '</div>',
            '#attributes' => array('class' => array('inputything')),
        );

        $form['gene_info']['warning3'] = array(
            #'#type' => 'markup',
            #'#markup' => '<div class="info_msgbox">Please give a justification for gene description in textbox [2b]</div>',
            '#type' => 'container',
            '#children' => '<div class="info_msgbox">Please give a justification for gene description in textbox</div>',
            '#states' => array( 'visible' => array( ':input[name="description"]' => array(  '!value' => '',  ), ),  ), 
        );

        $form['gene_info']['desc_just'] = array(
            '#type' => 'textarea',
            '#title' => t('Gene Description Justification *'),
            '#maxlength' => 1000,
            '#rows' => 3,
            '#prefix' => '<div class="ui-widget" style="width: 65%;">',
            '#suffix' => '</div>',
            '#states' => array( 'visible' => array( ':input[name="description"]' => array(  '!value' => '',  ), ),  ), 
            '#description' => 'You must fill this out if you are giving a gene description.',
         '#attributes' => array('class' => array('inputything')),
        );

        $form['gene_info']['pmid'] = array(
            '#type' => 'textfield',
            '#title' => t('[D] PMID'),
            '#size' => 50,
            '#maxlength' => 100,
            '#prefix' => '<div class="ui-widget">',
            '#suffix' => '</div>',
            '#ajax' => array(
                'callback' => 'grab_pmid_titles_submit_driven_callback',
                'wrapper' => 'checkboxes-div',
                'method' => 'replace',
                'effect' => 'slide',
                'speed' => 'fast',
                'prevent' => 'click',
                'progress' => 'interval',
                'event' => 'submit',
                'keypress' => TRUE,
                'prevent' => 'click',
            ),
            '#description' => 'Enter a Pubmed ID and press enter (if adding multiple separate with commas).',
            '#attributes' => array('class' => array('inputything')),
        );

        $form['gene_info']['box'] = array(
            '#type' => 'markup',
            '#prefix' => '<div id="box">',
            '#suffix' => '</div>',
            '#markup' => '<div class="msgbox3"><h5>Pubmed Entry</h5><p>Enter a list of comma-separated  PMIDs and press enter in box [D] above to check titles</p></div>',
        );

/* 
        $form['gene_info']['check'] = array(
            '#type' => 'submit',
            '#ajax' => array(
            'callback' => 'submit_driven_callback',
            'wrapper' => 'box',
            'name' => 'submit1',
            ),
            '#value' => t('Check PMID'),
        ); 
*/

        $form['gene_info']['comment'] = array(
            '#type' => 'textarea',
            '#title' => t('[E] General Comments'),
            '#rows' => 3,
            '#maxlength' => 256,
            '#prefix' => '<div class="ui-widget" style="width: 65%;">',
            '#suffix' => '</div>',
            '#attributes' => array('id' => 'species-filler', 'class' => array('inputything')),
        );

        $form['gene_info']['submit'] = array(
            '#type' => 'submit',
            '#value' => t('Submit'),
        );
    
    } elseif ($ret==-1) {

        $emptystr = '---';
        $date = empty($response[11]) ? "---" : $response[11];

        $form['gene_info']['table'] = array(
            '#type' => 'markup',
            '#markup' => '<div class="warning_msgbox">This Gene has already been edited. To edit the entry for this gene please contact your group representative or contact VectorBase (info-at-vectorabse.org).</div>

<!-- HEADER -->
<table class="tableone" summary="this table lists previous cap meta-data submission.">
<caption>Gene Info Table</caption>

<thead>
<tr>
<th class="th1" scope="col">Attribute</th> 
<th class="th2" scope="col">Value</th> 
</tr>
</thead>

<!-- FOOTER -->
<tfoot>
<tr>
<td colspan="2">Submitter : '.$response[0].', Date : '.$date.', Status : '.$response[4].'</td>
</tr>
</tfoot>

<!-- BODY -->
<tbody>
<tr><td colspan="2">
<div class="innerb">

<table class="tabletwo">

<tr>
<th class="td1" scope="row">Gene Cap ID</th>
<td class="td2">'.$response[1].'</td>
</tr>

<tr class="dk">
<th class="td1" scope="row">Gene Canonical ID</th>
<td class="td2">'.$response[2].'</td>
</tr>
<tr>
<th class="td1" scope="row">Cap Species</th>
<td class="td2">'.$response[3].'</td>
</tr>
<tr class="dk">
<th class="td1" scope="row">Gene Status</th>
<td class="td2">'.$response[5].'</td>
</tr>
<tr>
<th class="td1" scope="row">Gene Symbol</th>
<td class="td2">'.$response[6].'</td>
</tr>
<tr class="dk">
<th class="td1" scope="row">Gene Synonyms</th>
<td class="td2">'.$response[7].'</td>
</tr>
<tr>
<th class="td1" scope="row">Gene Descriptions</th>
<td class="td2">'.$response[8].'</td>
</tr>
<tr class="dk">
<th class="td1" scope="row">Gene Family</th>
<td class="td2">'.$response[9].'</td>
</tr>
<tr>
<th class="td1" scope="row">PMIDs</th>
<td class="td2">'.$response[10].'</td>
</tr>
</table>      
</div>

</td></tr>
</tbody>
</table>',
        '#attributes' => array('id' => 'species-filler'),
        );
    }

    return $form;

}

function download_page($path){
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $path);
        curl_setopt($ch, CURLOPT_FAILONERROR,1);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION,1);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
        curl_setopt($ch, CURLOPT_TIMEOUT, 15);
        $retValue = curl_exec($ch);                      
        curl_close($ch);
        return $retValue;
}

function grab_pmid_titles_submit_driven_callback($form, $form_state) {

    $pmid = $form_state['values']['pmid'];

    if($pmid=='') {
        $commands[] = ajax_command_replace("#box", '<div id="box"><div class="msgbox3"><h5>Pubmed Entry</h5><p>Error: Please enter a numeric PMID.</p></div></div>');  
        return array('#type' => 'ajax', '#commands' => $commands);
    }

    $p=str_replace(' ','',$pmid);
    $a=array_filter(explode(',',$p));
                     
    $markup=array();

    foreach ($a as $id) {
         
        $XML = download_page("http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&id=$id");
        $title = '';

        if(preg_match("/title\s+?\{.*?name\s+\"(.*?)\"/ms", $XML, $titlematches)) {
            $title = $titlematches[1];

            if(preg_match("/(Error occurred|does not exist)/",$title)) {

                $markup[]=$id.' : Atricle does not appear to exist';
            } else {
                $markup[]=$id.' : '.$title;
            }

        } else { 
            $markup[]=$id.' : Problem retrieving entry';
        }

    }                

    $commands = array();
    $body = implode ("</p><p>",$markup);
    $commands[] = ajax_command_replace("#box", '<div id="box"><div class="msgbox3"><h5>Pubmed Entry</h5><p>'.$body.'</p></div></div>');  

    return array('#type' => 'ajax', '#commands' => $commands);
    
    $commands[] = ajax_command_replace("#box", '<div id="box"><div class="msgbox3"><h5>Pubmed Entry</h5><p>Error: Problem retrieving entry.</p></div></div>');  
    return array('#type' => 'ajax', '#commands' => $commands);

    $commands[] = ajax_command_replace("#box", '<div id="box"><div class="msgbox3"><h5>Pubmed Entry</h5><p>Error: Article does not exist.</p></div></div>');  
    return array('#type' => 'ajax', '#commands' => $commands);

    $element = $form['box'];
    $element['#markup'] = "";
  
    return $element['#markup'] = "Title : '$title'";

}

function check_gene_entry($gene_id) {

    $count = 0;
    $edited = 0;
    $result = db_query("SELECT count(1) as count from {cap_gene_node} where gene_id = '".$gene_id."'");

    foreach ($result as $row) { 
        $count = $row->count; 
    }

    if ($count == 0) { 
        return 0;
    }

    $result = db_query("SELECT edited from {cap_gene_node} where gene_id = '".$gene_id."'");

    foreach ($result as $row) { 
        $edited = $row->edited; 
    }

    if ($edited == 0) {
        return 1;
    } else {
        return -1;
    } 
}

function ajax_callback_for_meta_table($form, $form_state) {
    
    $return = 1; 

    if ($return==-1) {
        $commands[] = ajax_command_replace("#checkboxes-div", "<div id='checkboxes-div'>This gene has already been edited - put in a table here '${title}'</div>");    
        return array('#type' => 'ajax', '#commands' => $commands);
    } else {
        return $form['gene_info'];
    }
}

function gff_submission_form($form_state) {

    $form['name'] = array(
        '#type' => 'fieldset',
        '#title' => t('Submit modified gene models'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    );

    $form['#attributes'] = array('enctype' => "multipart/form-data");

    $form['name']['upload'] = array(
        '#type' => 'file',
        '#description' => "File should be < 2Mb.",
        '#size' => 35,
    );

    $species = variable_get('species_modelu');

    $form['name']['species'] = array(
        '#type' => 'select',
        '#title' => t('Species'),
        '#options' => drupal_map_assoc($species),
        #'#description' => t('species.'),
    );

    $form['name']['format'] = array(
        '#type' => 'select',
        '#title' => t('Format'),
        '#options' => drupal_map_assoc(array('gff3','fasta','xls')),
        '#description' => t('Format of upload file.'),
    );

/*
    $form['name']['formatprob'] = array(
        '#type' => 'container',
        '#children' => '<div class="warning_msgbox">We are not yet accepting this format</div>',
        '#states' => array( 'visible' => array( ':input[name="format"]' => array('!value' => 'gff3'), ), ),
    );
*/

    $form['name']['sbm'] = array(
        '#type' => 'textfield',
        '#title' => t('Submitter Name'),
        '#required' => TRUE,
        '#description' => "Please enter the submitters full name.",
        '#size' => 20,
        '#maxlength' => 20,
        '#attributes' => array('class' => array('inputything')),
    );

    $form['name']['desc'] = array(
        '#type' => 'textfield',
        '#title' => t('Description'),
        '#required' => TRUE,
        '#description' => "Please enter a description of the contents of the upload file.",
        '#size' => 20,
        '#maxlength' => 20,
        '#attributes' => array('class' => array('inputything')),
    );

    if($GLOBALS['user']->uid < 1 ) {
        $form['name']['sbm']['#attributes'] = array('readonly' => 'readonly');
        $form['name']['sbm']['#default_value'] = t('Log in to use this!');
        $form['name']['desc']['#attributes'] = array('readonly' => 'readonly');
        $form['name']['desc']['#default_value'] = t('Log in to use this!');
    }

    $form['name']['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Submit',
    );

    return $form;
}

function gff_submission_form_validate($form, &$form_state) {

    if($GLOBALS['user']->uid < 1 ) {
        return drupal_access_denied(); 
    }

    $basedir = variable_get('basedir');
    $filepath = $basedir.'/tmp/' . $_FILES['files']['name']['upload'];
    $file_move_return = move_uploaded_file($_FILES['files']['tmp_name']['upload'], $filepath);

    if (!$file_move_return) {
        form_set_error('upload', "Something went wrong with the file upload - it might be a file size issue. Are you sure you file is < 2Mb?");
    }
    
}

function grab_json($what = NULL ,$format = NULL) {

    if($GLOBALS['user']->uid != variable_get('cap_admin_uid')) { 
        return drupal_access_denied();  
    }

    $tok = strtok($what, ":");
    $assoc;

    while ($tok!==false) {
        list($key,$value)=explode("=",$tok);
        $assoc[$key]=$value;
        $tok = strtok(":");
    }   

    if ($assoc['type'] && $assoc['type']=="annot") { 

        if($assoc['return'] && $assoc['return']=="list" &&  $assoc['value']) {

            if ($assoc['value']=="max") {
                $query = 'select max(sbm_id) as max from cap_file_node';
                $result = db_query($query);
                $thing=null;
                foreach ($result as $row) { 
                    $thing=$row;
                    if ($thing->max==null) {
                        print "There is a problem with the database - it seems to be empty";
                    } else {
                        print drupal_json_encode($thing);
                    }
                    exit;
                }


            } elseif (preg_match("/^\d{1,5}$/",$assoc['value'])) { //  } elseif (is_int($request)) {

                $result = db_query("SELECT sbm_id,submitter_name,name,name_email,uid,ip,species_version, "
                  ."file_name,file_type,file_md5,file_size,file_desc,timestamp "
                  ."FROM {cap_file_node} where sbm_id = ".$assoc['value']);

                $list = array();

                foreach ($result as $row) {
                    array_push($list,$row);
                }

                print drupal_json_encode($list);

                exit;

            } elseif (preg_match("/^(\d{1,5}),(\d{1,5})$/",$assoc['value'],$range)) {

                $lower=$range[1];      
                $upper=$range[2];      
                if ($lower>$upper) {  
                    print "Lower bound must be equal to or lower than upper bound\n";
                    exit;              
                }                      

                $result = db_query("SELECT sbm_id,submitter_name,name,name_email,uid,ip,species_version, "
                ."file_name,file_type,file_md5,file_size,file_desc,timestamp "
                ."FROM {cap_file_node} where sbm_id >= ".$lower." and sbm_id <= ".$upper);
                $list = array();

                foreach ($result as $row) {
                    array_push($list,$row);
                }

                print drupal_json_encode($list);

                exit;                  
            }                          

        } elseif($assoc['return'] && $assoc['return']=="file" && $assoc['value']) {

            $file = $assoc['value'];
            $filepath = variable_get('basedir').'/sbm/'.name2dir($file).$file;

            if (!file_exists($filepath)) { 
                die("file does not exist");
            }

            $filepath = addcslashes($filepath,'() ');
            $contents = `cat $filepath`;
            $start = '<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">'
              .'<html lang="en"><head><meta http-equiv="content-type" content="text/html; charset=utf-8"><title>title</title></head>'
              .'<body><pre>';
            $end = '</pre></body></html>';

            print $start.$contents.$end;

            exit;

        }
    }

    print "Unexpected request";

    exit;

}


function uploaded_files_list() {

    if($GLOBALS['user']->uid != variable_get('cap_admin_uid')) { 
        return drupal_access_denied();  
    }

    $user_col = (variable_get('cap_base_uri')=="cap/") ? "name" : "user";
    $user_email = (variable_get('cap_base_uri')=="cap/") ? "name_email" : "user_email";

    $result = db_query("SELECT sbm_id, submitter_name,$name,$name_email,uid,ip,species_version,file_name,file_type,file_md5,file_size,file_desc,timestamp FROM {cap_file_node}");
    $string = '';
    $list = array();

    foreach ($result as $row) {
        array_push($list,$row);
    }

    print drupal_json_encode($list);

    exit;

}    

function gff_submission_form_submit($form, &$form_state) {
    
    if($GLOBALS['user']->uid < 1 ) {
        return drupal_access_denied(); 
    }

    $tmpfile = $_FILES['files']['name']['upload'];
    $size = $_FILES['files']['size']['upload'];
    $desc = $form_state['values']['desc'];
    $format = $form_state['values']['format'];
    $species = $form_state['values']['species'];
    $sbmname = $form_state['values']['sbm'];
    $filepath = variable_get('basedir').'/tmp/'.$tmpfile;

    if ($format != 'gff3') {
        drupal_set_message('We are not currently accepting fasta or xls format files.','warning');
        drupal_goto(variable_get('cap_base_uri'));
    } 

/* 
    $host = getenv('CAP_HOST');
    $port = getenv('CAP_PORT'); 
*/

    $params = array('body' => 'As above.','subject' => '[Cap] file : Submit pressed', );
    $out=drupal_mail('GeneAnnotation', 'notice',  'dsth@cantab.net', language_default(), $params, 'cap_qc@vectorbase.org',TRUE);

    // all of this needs to be moved to validate!
    if(preg_match("/\A[\.a-zA-Z0-9_-]+\z/",$tmpfile)==0){
        $params = array('body' => 'As above.','subject' => '[Cap] file : Submit pressed - but filename has non-permitted chars '.$tmpfile, );
        $out=drupal_mail('GeneAnnotation', 'notice',  'dsth@cantab.net', language_default(), $params, 'cap_qc@vectorbase.org',TRUE);
        drupal_set_message('Filenames must consist of entirely alphanumeric characters (in the range a-z A-Z 0-9) or "_", "-" and "." (no spaces or non-ASCI chars).',
          'warning');
        drupal_goto(variable_get('cap_base_uri'));
    }

    $cmd = 'md5sum '.$filepath;
    $md5 = `$cmd`;
    list($md5) = explode(' ',$md5);
    $count = 0;

    $result = db_query("SELECT count(1) as count from {cap_file_node} where file_md5 = '".$md5."'");
    
    // really have little clue about the drupal db interface and don't give a shite either... - it can only return one value
    foreach ($result as $row) { 
        $count = $row->count; 
    }

    if ($count > 0) {
        //drupal_set_message('We have already received a file with this md5 sum.','warning');
        //drupal_goto(variable_get('cap_base_uri'));
    } 
    

    $message = '<p>received file ' 
      . $_FILES['files']['name']['upload']  
      . ' ('
      . $_FILES['files']['size']['upload']  
      . ' bytes/';

    $user_col = (variable_get('cap_base_uri')=="cap/") ? "name" : "user";
    $user_email = (variable_get('cap_base_uri')=="cap/") ? "name_email" : "user_email";

    $sbmid = db_insert('cap_file_node')->fields(
        array(
            $user_col => $GLOBALS['user']->name,
            'uid' => $GLOBALS['user']->uid,
            'submitter_name' => $sbmname,
            $user_email => $GLOBALS['user']->mail,
            'ip' => $GLOBALS['user']->hostname,
            'species_version' => $species,
            'file_name' => $tmpfile,
            'file_type' => $format,
            'file_md5' => $md5,
            'file_desc' => $desc,
            'file_size' => $size,
        )
    )->execute();

    $sbmidstr = sprintf("%06s",$sbmid);
    $newfile = strip('sbm'.$sbmidstr.'_'.$tmpfile);

    $basedir = variable_get('basedir');

    $old = $basedir.'/tmp/'.$tmpfile;
    
    $newpath=$basedir.'/sbm/'.name2dir($newfile);

    createdir($newpath);
    $new = $newpath.$newfile;

    // PERMISSIONS ON DIR!
    rename($old,$new) or die('problem moving file: '.$old.' to '.$new);
    
    $num_updated = db_update('cap_file_node')->fields(array(
        'file_name' => $newfile,
    ))->condition('sbm_id', $sbmid, '=')->execute();

    $message .= 'md5: '.$md5.'). Please quote submission id='.$sbmid.' in any enquiries you send.</p>';

    drupal_set_message($message);

}

function GeneAnnotation_mail($key, &$message, $params) {
    $language = $message['language'];
    $message['subject'] = $params['subject'];
    $message['body'][] = $params['body'];
}

function gff_download_ajax_form($form, &$form_state) {

    $form['dwnld'] = array(
        '#type' => 'fieldset',
        '#title' => t('Download Gene Models or Fasta'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    );

    $options_first = _ajax_example_get_first_dropdown_options__();

    $selected = isset($form_state['values']['dropdown_first']) 
      ? $form_state['values']['dropdown_first'] 
      : key($options_first);

    $form['dwnld']['dropdown_first'] = array(
        '#type' => 'select',
        '#title' => 'Species',
        '#options' => $options_first,
        '#default_value' => $selected,
    );

    $form['dwnld']['exmpl_rp'] = array(
        '#type' => 'container',
        '#children' => 'Rhodnius contig example: GL563039',
        '#states' => array( 'visible' => array( ':input[name="dropdown_first"]' => array('value' => 'Rhodnius prolixus RproC1.0'), ), ), 
     );  
    $form['dwnld']['exmpl_gm'] = array(
        '#type' => 'container',
        '#children' => 'Glossina contig example: scf7180000649169',
        '#states' => array( 'visible' => array( ':input[name="dropdown_first"]' => array('value' => 'Glossina morsitans GmorY1.0'), ), ), 
     );  

    $form['dwnld']['exmpl_aalb'] = array(
        '#type' => 'container',
        '#children' => 'A. albimanus contig example: KB672405',
        '#states' => array( 'visible' => array( ':input[name="dropdown_first"]' => array('value' => 'Anopheles albimanus v0.5'), ), ), 
     );  

    $form['dwnld']['exmpl_ara'] = array(
        '#type' => 'container',
        '#children' => 'A. arabiensis contig example: KB704762',
        '#states' => array( 'visible' => array( ':input[name="dropdown_first"]' => array('value' => 'Anopheles arabiensis v0.5'), ), ), 
     );  

    $form['dwnld']['exmpl_chr'] = array(
        '#type' => 'container',
        '#children' => 'A. christyi contig example: KB697215',
        '#states' => array( 'visible' => array( ':input[name="dropdown_first"]' => array('value' => 'Anopheles christyi v0.5'), ), ), 
     );  

    $form['dwnld']['exmpl_dir'] = array(
        '#type' => 'container',
        '#children' => 'A. dirus contig example: KB672857',
        '#states' => array( 'visible' => array( ':input[name="dropdown_first"]' => array('value' => 'Anopheles dirus v0.5'), ), ), 
     );  

    $form['dwnld']['exmpl_epi'] = array(
        '#type' => 'container',
        '#children' => 'A. epiroticus contig example: KB671636',
        '#states' => array( 'visible' => array( ':input[name="dropdown_first"]' => array('value' => 'Anopheles epiroticus v0.5'), ), ), 
     );  

    $form['dwnld']['exmpl_fun'] = array(
        '#type' => 'container',
        '#children' => 'A. funestus contig example: KB668909',
        '#states' => array( 'visible' => array( ':input[name="dropdown_first"]' => array('value' => 'Anopheles funestus v0.5'), ), ), 
     );  

    $form['dwnld']['exmpl_min'] = array(
        '#type' => 'container',
        '#children' => 'A. minimus contig example: KB663765',
        '#states' => array( 'visible' => array( ':input[name="dropdown_first"]' => array('value' => 'Anopheles minimus v0.5'), ), ), 
     );  

    $form['dwnld']['exmpl_qua'] = array(
        '#type' => 'container',
        '#children' => 'A. quadriannulatus contig example: KB667526',
        '#states' => array( 'visible' => array( ':input[name="dropdown_first"]' => array('value' => 'Anopheles quadriannulatus v0.5'), ), ), 
     );  

    $form['dwnld']['exmpl_ste'] = array(
        '#type' => 'container',
        '#children' => 'A. stephensi contig example: KB664650',
        '#states' => array( 'visible' => array( ':input[name="dropdown_first"]' => array('value' => 'Anopheles stephensi v0.5'), ), ), 
     );  

    $form['dwnld']['format'] = array(
        '#type' => 'radios',
        '#title' => t('Download Annotation'),
        '#options' => array( 
            'fasta' => t('Fasta sequence'), 
            'gff'   => t('Gff annotation') 
        ),
        '#default_value' => 'fasta',
    );
    
    $form['dwnld']['contig'] = array(
        '#type' => 'textfield',
        '#title' => t('Contig name'),
        '#description' => t('Do not include version numbers.'),
        '#size' => 18,
        '#maxlength' => 17,
        '#prefix' => '<div class="ui-widget">',
        '#suffix' => '</div>',
        '#attributes' => array('id' => 'species-filler', 'class' =>  array('inputything')),
    );

    $form['dwnld']['warning1'] = array(
        '#type' => 'container',
        '#children' => '<div class="info_msgbox">To ensure that you receive valid gff if the regions you select fall within a gene we will expand the region into the next inter-genic gap.</div>',
        '#states' => array( 'visible' => array( ':input[name="format"]' => array('value' => 'gff'), ), ),
    );

    if($GLOBALS['user']->uid < 1 ) {
        $form['dwnld']['contig']['#attributes'] = array('readonly' => 'readonly');
        $form['dwnld']['contig']['#default_value'] = t('Log in to use this!');
    }

    $form['dwnld']['start'] = array(
        '#type'             => 'textfield',
        '#title'            => t('Start'),
        '#description'      => t('Give start region in bp.'),
        '#default_value'    => 1,
        '#size'             => 18,
        '#maxlength'        => 17,
        '#states' => array(
            'visible' => array(
                ':input[name="format"]' => array('value' => 'gff'),
            ),
        ),
         '#attributes' => array('class' => array('inputything')),
    );

    $form['dwnld']['end'] = array(
        '#type' => 'textfield',
        '#title' => t('End'),
        '#description' => t('Give end region in bp.'),
        '#default_value' => 100000,
        '#size' => 18,
        '#maxlength' => 17,
        '#states' => array(
            'visible' => array(
                ':input[name="format"]' => array('value' => 'gff'),
            ),
        ),
         '#attributes' => array('class' => array('inputything')),
    );

    $form['dwnld']['download'] = array(
        '#type' => 'select',
        '#title' => t('Download As'),
        '#options' => drupal_map_assoc(array('file','page')),
        '#description' => t('Download file or return text directly as page'),
    );

    $form['dwnld']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );

    return $form;

}

function meta_data_list() {

    if($GLOBALS['user']->uid != variable_get('cap_admin_uid')) { 
        return drupal_access_denied();  
    }

    $result = db_query("SELECT sbm_id, user, user_email, ip, edited, species_version, gene_id, status, status_just, gene_sym, sym_just, description, desc_just, pmid, comments FROM {cap_gene_node}");
    $list = array();
    foreach ($result as $row) { array_push($list,$row); }
    print drupal_json_encode($list);
    exit;

}    

function blarp_autotextfields_callback($form, $form_state) {
    return $form['textfields'];
}

function ajax_example_dependent_dropdown_callback__($form, $form_state) {
    return $form['dropdown_second'];
}

function _ajax_example_get_first_dropdown_options__() {

    // should be pulling data from the database.
    $species = variable_get('species_modeld');
    return drupal_map_assoc($species);
}

function pull_autocompletion_names() {

    $file = variable_get('basedir').'/'.variable_get('auto_scfnames');

    $file_handle = fopen($file, "rb") 
      or die("Sorry: cannot find scafffold names config file $file");

    $scafs = array();
    $c=0;

    while (!feof($file_handle) ) {
        $c++;
        if ($c > 150) break;
        $line = fgets($file_handle, 406); 
        if ($line == '') continue; // why break?!?
        $scafs[] = trim($line);
    }

    fclose($file_handle);
    return $scafs;
}

function pull_contig_names($species) {

    $file_handle = fopen("/homes/dsth/dev/NewCap/config/".$species."_SeqNames.txt", "rb") 
      or die("Sorry: cannot find scafffold names config file for " . $species);

    $scafs = array();
    while (!feof($file_handle) ) {
        $line = fgets($file_handle, 406); 
        if ($line == '') break;
        $scafs[] = trim($line);
    }

    fclose($file_handle);

    return drupal_map_assoc($scafs);

}
    
function gff_download_ajax_form_validate($form, &$form_state) {

    if($GLOBALS['user']->uid < 1 ) {
        return drupal_access_denied(); 
    }

    if (!ctype_digit($form_state['values']['start']) 
      || !ctype_digit($form_state['values']['end'])) {
        form_set_error('', t('Start and end must be numeric.'));
    } 
}

function gff_download_ajax_form_submit($form, &$form_state) {

    if($GLOBALS['user']->uid < 1 ) {
        return drupal_access_denied(); 
    }

    $tabix = variable_get('tabix');
    $gene_idx = variable_get('gene_indexer');
    $fasta_idx = variable_get('fasta_indexer');

    $date = date("YmdHis");
    $contigname = $form_state['values']['contig'];
    $species = $form_state['values']['dropdown_first'];
    
    $species = str_replace(' ','_',$species);

    $basedir = variable_get('basedir');
    $indexed_gff = $basedir.'/gff/'.$species.'.gff.gz';

    $ofile = '';
    $filepath = '';
    $type = '';

    $filelimit = variable_get('filelimit');

    if ($form_state['values']['format']=='gff') {

        $type = $form_state['values']['download']=='file'?'.gff':'';

/*
        $exists = `grep $contigname $basedir/${species}.scfnames.txt`;
        if ($exists == '') { 
            drupal_set_message('The requested contig does not exist or is too short (<5 Kbp) and was excluded from the automatic annotation process.','error');
            drupal_goto(variable_get('cap_base_uri'));
        }
*/

        $start = $form_state['values']['start'];
        $end = $form_state['values']['end'];

        $coords = `$gene_idx extract $basedir/gff/${species}.gene.idx ${contigname}:${start}-${end}`;
        //$coords = "$gene_idx extract $basedir/gff/${species}.gene.idx ${contigname}:${start}-${end}";
        //$coords = `$coords`;

        if (empty($coords)) { 
            drupal_set_message('Unable to extract coords from gene model index.','error');
            drupal_goto(variable_get('cap_base_uri'));
        }

        $ofile = $date.'_'.$species.'_'.$coords.$type;
        $filepath = $basedir.'/tmp/'.$ofile;

        $cmd = $tabix.' '.$indexed_gff.' '.$coords.' > '.$filepath;
        system($cmd);

        $fs = filesize($filepath);

        if (!file_exists($filepath)) { 
            drupal_set_message('There was a problem generating gff for the selected region','error');
            drupal_goto(variable_get('cap_base_uri'));
        } elseif (filesize($filepath) == 0) {
            drupal_set_message('The requested region contains no gff features','warning'); 
            unlink($filepath);
            drupal_goto(variable_get('cap_base_uri'));
        } elseif (filesize($filepath) > $filelimit) {
            $filelimit = sprintf("%.2f",$filelimit/(1024^2));
            drupal_set_message('The gff file for the requested region is greater than '.$filelimit.'Mb - please select a smaller region','warning'); 
            unlink($filepath);
            drupal_goto(variable_get('cap_base_uri'));
        } else {
            drupal_goto('cap/'.$ofile.'/gff');
        }

    } elseif ($form_state['values']['format']=='fasta') {

        $type = $form_state['values']['download']=='file'?'.fa':'';
        $ofile = $date.'_'.$species.'_'.$contigname.$type;
        $filepath = $basedir.'/tmp/'.$ofile;

        $cmd = $fasta_idx.' extract '.$basedir.'/fasta/'.$species.'.fa.idx '.$contigname.' > '.$filepath;
        system($cmd);

        $fs = filesize($filepath);

        if (!file_exists($filepath)) { 
            drupal_set_message('There was a problem extracting sequence for scaffold.','error');
            drupal_goto(variable_get('cap_base_uri'));
        } elseif (filesize($filepath) == 0) {
            drupal_set_message('There was a problem extracting sequence for scaffold - the sequence file is empty.','warning');
            unlink($filepath);
            drupal_goto(variable_get('cap_base_uri'));
        } elseif (filesize($filepath) > $filelimit) {
            $filelimit = sprintf("%.2f",$filelimit/(1024^2));
            drupal_set_message('The fasta for the requested scaffold is greater than '.$filelimit.'Mb - please download from ftp server','warning'); 
            unlink($filepath);
            drupal_goto(variable_get('cap_base_uri'));
        } else {
            drupal_goto('cap/'.$ofile.'/gff');
        }
    }
}

